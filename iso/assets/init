#!/bin/sh
set -e

export PATH=/bin
# Top secret option...
export DOCKER_RAMDISK=true

mount -t devtmpfs devtmpfs /dev

mkdir -p /var/log
syslogd
sleep 1
logger -s -p user.info -t "init[$$]" "Start init"

# Add root user & groups
touch /etc/group
chmod 0644 /etc/group
touch /etc/passwd
chmod 0644 /etc/passwd
addgroup -S -g 0 root
adduser -S -u 0 -G root -h /root -s /bin/sh -D root
addgroup -S -g 50 staff

touch /var/log/lastlog
touch /var/log/wtmp

mkdir /proc
mkdir /sys
mkdir /rw
mkdir /tmp
mkdir -p /var/lib/docker
mkdir -p /var/lib/only-docker
mkdir -p /var/run
mkdir -p /dev/pts

mkdir -p /etc/network
touch /etc/network/interfaces

logger -s -p user.info -t "init[$$]" "Mounting system"
mount -t proc none /proc
mount -t sysfs none /sys
mount -t tmpfs none /sys/fs/cgroup
mount -t devpts devpts /dev/pts
mount -t tmpfs none /tmp

for i in perf_event net_cls freezer devices blkio memory cpuacct cpu cpuset; do
    mkdir -p /sys/fs/cgroup/$i
    mount -t cgroup -o $i none /sys/fs/cgroup/$i
done

DEVICE=$(blkid | grep -e 'LABEL="OD-DATA"' | head -n 1 | sed 's/:.*//')
if [ -n "$DEVICE" ]; then
    PARTNAME=$(echo "$DEVICE" | sed 's/.*\///')
    logger -s -p user.info -t "init[$$]" "Mounting HDD /dev/$PARTNAME"
    mkdir -p /mnt/$PARTNAME
    if ! mount -t ext4 /dev/$PARTNAME /mnt/$PARTNAME; then
        logger -s -p user.info -t "init[$$]" "Running from memory, this won't be good..."
    else
        rm -rf /var/lib/docker
        mkdir -p /mnt/$PARTNAME/var/lib/docker
        ln -s /mnt/$PARTNAME/var/lib/docker /var/lib/docker

        rm -rf /var/lib/only-docker
        mkdir -p /mnt/$PARTNAME/var/lib/only-docker
        ln -s /mnt/$PARTNAME/var/lib/only-docker /var/lib/only-docker
    fi
fi
DEVICE=$(blkid | grep -e 'LABEL="OD-SWAP"' | head -n 1 | sed 's/:.*//')
if [ -n "$DEVICE" ]; then
    logger -s -p user.info -t "init[$$]" "Enable SWAP $DEVICE"
    swapon $DEVICE
fi

touch /etc/profile
if [ ! -f /var/lib/only-docker/profile ]; then
    mv /etc/profile /var/lib/only-docker/
else
    rm -f /etc/profile
fi
ln -s /var/lib/only-docker/profile /etc/profile

logger -s -p user.info -t "init[$$]" "Loading modules"
modprobe overlay

hostname only-docker
ifconfig lo 127.0.0.1

cat <<EOF > /etc/resolv.conf
nameserver 8.8.8.8
nameserver 8.8.4.4
options single-request-reopen
EOF

logger -s -p user.info -t "init[$$]" "Configuring Dropbear SSH"
mkdir -p /etc/dropbear
if [ ! -d /var/lib/only-docker/dropbear ]; then
    mv /etc/dropbear /var/lib/only-docker/
else # if it exists, remove the ramdisk's ssh config, so that the hard drive's is properly linked
    rm -rf /etc/dropbear
fi
ln -s /var/lib/only-docker/dropbear /etc/dropbear

if [ ! -f /etc/dropbear/dropbear_dss_host_key ]; then
    dropbearkey -t ecdsa -f /etc/dropbear/dropbear_ecdsa_host_key
fi
if [ ! -f /etc/dropbear/dropbear_rsa_host_key ]; then
    dropbearkey -t rsa -f /etc/dropbear/dropbear_rsa_host_key
fi
if [ ! -f /etc/dropbear/dropbear_dss_host_key ]; then
    dropbearkey -t dss -f /etc/dropbear/dropbear_dss_host_key
fi

logger -s -p user.info -t "init[$$]" "Configuring for Vagrant"
mkdir -p /root/.ssh
chmod 0700 /root/.ssh
if [ ! -d /var/lib/only-docker/ssh ]; then
    mv /root/.ssh /var/lib/only-docker/ssh
else # if it exists, remove the ramdisk's ssh config, so that the hard drive's is properly linked
    rm -rf /root/.ssh
fi
ln -s /var/lib/only-docker/ssh /root/.ssh

if [ ! -f /root/.ssh/authorized_keys ]; then
    cat <<KEY >/root/.ssh/authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key
KEY
    chmod 0600 /root/.ssh/authorized_keys
fi

logger -s -p user.info -t "init[$$]" "Waiting for networking"
while sleep 0.1; do
    if grep -qs eth0 /proc/net/dev; then
        break
    fi
done

logger -s -p user.info -t "init[$$]" "Starting console"
openvt /bin/sh
openvt -s /bin/console-container.sh

logger -s -p user.info -t "init[$$]" "Reloading /etc/profile"
source /etc/profile

if [ -z "$DOCKER_STORAGE" ]; then
    DOCKER_STORAGE="overlay"
fi
if [ -z "$DOCKER_DIR" ]; then
    DOCKER_DIR="/var/lib/docker"
fi
if [ -z "$DOCKER_HOST" ]; then
    DOCKER_HOST="-H unix://"
fi
if [ -z "$DOCKER_ULIMITS" ]; then
    DOCKER_ULIMITS=1048576
fi

logger -s -p user.info -t "init[$$]" "Setting ulimit $DOCKER_ULIMITS"
ulimit -n $DOCKER_ULIMITS
ulimit -p $DOCKER_ULIMITS

logger -s -p user.info -t "init[$$]" "Starting Docker -d -D -s $DOCKER_STORAGE -g \"$DOCKER_DIR\" $DOCKER_HOST $DOCKER_EXTRA_ARGS"
exec docker -d -D -s $DOCKER_STORAGE -g "$DOCKER_DIR" $DOCKER_HOST $DOCKER_EXTRA_ARGS
