#!/bin/sh
set -e

export PATH=/bin
# Top secret option...
export DOCKER_RAMDISK=true

mkdir -p /var/log
echo "$(date): Start init" > /var/log/init.log

# Add root user & groups
touch /etc/group
chmod 0644 /etc/group
touch /etc/passwd
chmod 0644 /etc/passwd
addgroup -S -g 0 root
adduser -S -u 0 -G root -h /root -s /bin/sh -D root
addgroup -S -g 50 staff

mount -t devtmpfs devtmpfs /dev

mkdir /proc
mkdir /sys
mkdir /rw
mkdir /tmp
mkdir -p /var/lib/docker
mkdir -p /var/lib/only-docker
mkdir -p /var/run
mkdir -p /dev/pts

echo "$(date): Mounting system" >> /var/log/init.log
mount -t proc none /proc
mount -t sysfs none /sys
mount -t tmpfs none /sys/fs/cgroup
mount -t devpts devpts /dev/pts
mount -t tmpfs none /tmp

for i in perf_event net_cls freezer devices blkio memory cpuacct cpu cpuset; do
    mkdir -p /sys/fs/cgroup/$i
    mount -t cgroup -o $i none /sys/fs/cgroup/$i
done

echo "$(date): Mounting HDD" >> /var/log/init.log
mkdir -p /mnt/sda
if ! mount -t ext4 /dev/sda /mnt/sda; then
    echo "Running from memory, this won't be good..."
else
    rm -rf /var/lib/docker
    mkdir -p /mnt/sda/var/lib/docker
    ln -s /mnt/sda/var/lib/docker /var/lib/docker

    rm -rf /var/lib/only-docker
    mkdir -p /mnt/sda/var/lib/only-docker
    ln -s /mnt/sda/var/lib/only-docker /var/lib/only-docker
fi

echo "$(date): Loading modules" >> /var/log/init.log
modprobe overlay

hostname only-docker

echo 'nameserver 8.8.8.8' > /etc/resolv.conf

# Configure Dropbear SSH
echo "$(date): Configuring Dropbear SSH" >> /var/log/init.log
mkdir -p /etc/dropbear
if [ ! -d /var/lib/only-docker/dropbear ]; then
    mv /etc/dropbear /var/lib/only-docker/
else # if it exists, remove the ramdisk's ssh config, so that the hard drive's is properly linked
    rm -rf /etc/dropbear
fi
ln -s /var/lib/only-docker/dropbear /etc/dropbear

if [ ! -f /etc/dropbear/dropbear_rsa_host_key ]; then
  dropbearkey -t rsa -f /etc/dropbear/dropbear_rsa_host_key
fi
if [ ! -f /etc/dropbear/dropbear_dss_host_key ]; then
  dropbearkey -t dss -f /etc/dropbear/dropbear_dss_host_key
fi
dropbear


# Configuration for Vagrant
echo "$(date): Configuring for Vagrant" >> /var/log/init.log
mkdir -p /root/.ssh
chmod 0700 /root/.ssh
if [ ! -d /var/lib/only-docker/ssh ]; then
    mv /root/.ssh /var/lib/only-docker/ssh
else # if it exists, remove the ramdisk's ssh config, so that the hard drive's is properly linked
    rm -rf /root/.ssh
fi
ln -s /var/lib/only-docker/ssh /root/.ssh

if [ ! -f /root/.ssh/authorized_keys ]; then
    cat <<KEY >/root/.ssh/authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key
KEY
    chmod 0600 /root/.ssh/authorized_keys
fi

echo "$(date): Starting console" >> /var/log/init.log
openvt /bin/sh
openvt -s /bin/console-container.sh

echo "$(date): Starting Docker" >> /var/log/init.log
exec docker -d -D -s overlay -g /var/lib/docker -H unix:// -H tcp://0.0.0.0:2375
